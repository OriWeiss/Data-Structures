package Lab4;import java.util.EmptyStackException;/** A class of stacks whose entries are stored in an array. @author ORI WEISS @version 02/13/2018 */public final class ArrayStack<T> implements TextbookStackInterface<T>{	private T[] myStack;    // Array of myStack entries	private int topIndex; // Index of top entry	private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;	public ArrayStack()	{		this(DEFAULT_CAPACITY);		// TODO PROJECT #2	} // end default constructor	public ArrayStack(int initialCapacity)	{		this.myStack = (T[]) new Object[initialCapacity];		this.topIndex = this.myStack.length;		this.initialized = true;		// TODO PROJECT #2	} // end constructor	public void push(T newEntry)	{		checkInitialization();//		System.out.println("IN PUSH JUST CHECKED INITIALIZATION");		checkCapacity(DEFAULT_CAPACITY);//		System.out.println("IN PUSH JUST CHECKED CAPACITY");		ensureCapacity();//		System.out.println("IN PUSH JUST CHECKED ENSURECAPACITY");		topIndex--;		this.myStack[topIndex] = newEntry;		// TODO-DONE PROJECT #2	} // end push	public T peek() throws InsufficientNumberOfElementsOnStackException	{		checkInitialization();		ensureCapacity();//		T result = null;		if(topIndex == this.myStack.length){			//checks first element is not null			throw new InsufficientNumberOfElementsOnStackException("Whoops not enough elements");		}		else {			return this.myStack[this.topIndex];		}		// TODO-DONE PROJECT #2//		return result;//		return null; // THIS IS A STUB	} // end peek	public T pop() throws InsufficientNumberOfElementsOnStackException	{		T result = null;		checkInitialization();		if(topIndex == this.myStack.length){			throw new InsufficientNumberOfElementsOnStackException("There are no elements in the stack");		}		else{			result = this.myStack[this.topIndex];//			System.out.println("Top Index = " + this.topIndex);//			System.out.println("result = " + result);			this.topIndex++;		}		return result;		// TODO PROJECT #2//		return null; // THIS IS A STUB	} // end pop	public boolean isEmpty()	{		return(this.topIndex == this.myStack.length ); // -1 to get last index in stack array		// TODO PROJECT #2//		return false;  //THIS IS A STUB	} // end isEmpty	public void clear()	{		checkInitialization();		this.topIndex = this.myStack.length;//		int index = 0;//		while(!isEmpty()){//			this.myStack[index] = null;//		}//		this.topIndex = this.myStack.length; //reset top index		// TODO PROJECT #2	} // end clear	// Throws an exception if this object is not initialized.	private void checkInitialization() throws SecurityException	{		if(!this.initialized){			throw new SecurityException("Security error found");		}		// TODO PROJECT #2	} // end checkInitialization	// Throws an exception if the client requests a capacity that is too large.	private void checkCapacity(int capacity) throws IllegalStateException	{		if(this.myStack.length > capacity){			throw new IllegalStateException("Capacity has been exceeded");		}		// TODO PROJECT #2	} // end checkCapacity	// Doubles the size of the array myStack if it is full	// Precondition: checkInitialization has been called.	private void ensureCapacity()	{		checkInitialization();		if(this.topIndex == 0){//			System.out.println("CALLED ENSURE CAPACITY");			int originalLength = this.myStack.length;			int newLength = 2*originalLength;			T [] copyStack = (T[]) new Object[newLength]; //creating copy of stack to place object while resizing			checkCapacity(newLength);			for (int i = originalLength -1 ; i >= 0  ; i--) { //should be -1?				copyStack[newLength -1]= this.myStack[i];				newLength--;			}			this.topIndex = copyStack.length - this.myStack.length;			this.myStack = copyStack;			System.out.println("-----> The stack capacity has been doubled and it is now: " + newLength + "with topIndex = " + this.topIndex);		}		// TODO PROJECT #2	} // end ensureCapacity	// These methods are only for testing of the array implementation	public int getTopIndex()	{		return this.topIndex;	}	public int getCapacity() { return this.myStack.length; }	public static void main(String[] args)	{		System.out.println("*** Creating a stack with default constructor ***");		TextbookStackInterface<String> defaultStack = new ArrayStack<>();		System.out.println("---> The stack capacity is set by the constructor to: " + defaultStack.getCapacity());		System.out.println("---> The topIndex is: " + defaultStack.getTopIndex());		System.out.println("\n---> isEmpty() returns " + defaultStack.isEmpty());		int topLocation = defaultStack.getTopIndex();		int capacity = defaultStack.getCapacity();		if (topLocation == capacity)			System.out.println("CORRECT - the top index is set to " + capacity);		else			System.out.println("INCORRECT - the top index is set to " + topLocation);		System.out.println("\n---> Adding to stack to get: " +				"Joe Jane Jill Jess Jim");		defaultStack.push("Jim");		defaultStack.push("Jess");		defaultStack.push("Jill");		defaultStack.push("Jane");		defaultStack.push("Joe");		System.out.println("---> Done adding 5 elements; the topIndex is: " + defaultStack.getTopIndex());		System.out.println("---> isEmpty() returns " + defaultStack.isEmpty());		System.out.println("\n--> Testing peek and pop:");		while (!defaultStack.isEmpty())		{			String top = defaultStack.peek();			System.out.println(top + " is at the top of the stack.");			top = defaultStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		System.out.println("\n--> Adding to stack to get: " +				"Jim Jess Joe");		defaultStack.push("Joe");		defaultStack.push("Jess");		defaultStack.push("Jim");		System.out.println("---> Done adding 3 elements; the topIndex is: " + defaultStack.getTopIndex());		System.out.println("\n--> Testing clear:");		defaultStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + defaultStack.isEmpty());		try		{			System.out.println("defaultStack.peek() returns: ");			System.out.println(defaultStack.peek());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		try		{			System.out.println("defaultStack.pop() returns: ");			System.out.println(defaultStack.pop());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		System.out.println("\n\n*** Creating a stack with the secondary constructor ***");		TextbookStackInterface<String> smallStack = new ArrayStack<>(3);		System.out.println("---> The stack capacity is set by the constructor to: " + smallStack.getCapacity());		System.out.println("---> The topIndex is: " + smallStack.getTopIndex());		System.out.println("\n--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("\n--> Adding to stack to get: " +				"Joe Jane Jill Jess Jim");		smallStack.push("Jim");		smallStack.push("Jess");		smallStack.push("Jill");		smallStack.push("Jane");		smallStack.push("Joe");		System.out.println("---> Done adding 5 elements; the topIndex is: " + smallStack.getTopIndex());		System.out.println("--> isEmpty() returns " + smallStack.isEmpty());		System.out.println("\n-->Testing peek and pop:");		while (!smallStack.isEmpty())		{			String top = smallStack.peek();			System.out.println(top + " is at the top of the stack.");			top = smallStack.pop();			System.out.println(top + " is removed from the stack.");		} // end while		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		topLocation = smallStack.getTopIndex();		capacity = smallStack.getCapacity();		if (topLocation == capacity)			System.out.println("CORRECT - the top index is set to " + capacity);		else			System.out.println("INCORRECT - the top index is set to " + topLocation);		System.out.println("\n--> Adding to stack to get: " +				"Jim Jess Joe");		smallStack.push("Joe");		smallStack.push("Jess");		smallStack.push("Jim");		System.out.println("---> Done adding 3 elements; the topIndex is: " + smallStack.getTopIndex());		System.out.println("\n--> Testing clear:");		smallStack.clear();		System.out.println("--> The stack should be empty: ");		System.out.println("isEmpty() returns " + smallStack.isEmpty());		try		{			System.out.println("smallStack.peek() returns: ");			System.out.println(smallStack.peek());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		try		{			System.out.println("smallStack.pop() returns: ");			System.out.println(smallStack.pop());		}		catch (InsufficientNumberOfElementsOnStackException inoeose)		{			System.out.println(" CORRECT - exception has been thrown: " + inoeose.getMessage());		}		System.out.println("*** Done ***");	} // end main} // end ArrayStack