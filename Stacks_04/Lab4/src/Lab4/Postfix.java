package Lab4;import java.util.Stack;/** * A class that represents a postfix expression. * * @author ORI WEISS * @version 02/13/2018 */public class Postfix{    /**     * Creates a postfix expression that represents a given infix expression.     * Segment 5.16     *     * @param infix a string that is a valid infix expression     * @return a string that is the postfix expression equivalent to infix     */    public void convertToPostfix(String infix)    {        // TODO-DONE PROJECT #5        System.out.println("Infix:   " + infix);        Stack<Character> operatorStack = new Stack<>();        StringBuilder postfix = new StringBuilder();        int characterCount = infix.length();        char topOperator;        int i = 0;        while(i < characterCount){ //infix has characters left to parse  ********            char nextCharacter = infix.charAt(i);//next non blank character of infix *************            switch(nextCharacter) {                case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': //**************** //use the inout variables                    postfix.append(nextCharacter);//add next character to postfix                    break;                case '^':                    operatorStack.push(nextCharacter);                    break;                case '+':                case '-':                case '*':                case '/':                    while (!operatorStack.isEmpty() && getPrecedence(nextCharacter) <= getPrecedence(operatorStack.peek())) {                        postfix.append(operatorStack.peek());//add operatorStack.peek() to postfix;                        operatorStack.pop();                    }                    operatorStack.push(nextCharacter);                    break;                case '(':                    operatorStack.push(nextCharacter);                    break;                case ')':                    topOperator = operatorStack.pop();                    while (topOperator != '(') {                        postfix.append(topOperator);//add topOperator to postfix;                        topOperator = operatorStack.pop();                    }                    break;                default:                    break;            }            i++;        }        while (!operatorStack.isEmpty()){            topOperator = operatorStack.pop();            postfix.append(topOperator);//add topOperator to postifix        }        // IMPLEMENT ALGORITHM 5.16        System.out.println("Postfix: " + postfix.toString());        System.out.println("\n");    } // end convertToPostfix    /**     * Indicates the precedence of a given operator.     *     * @param operator a character that is (, ), +, -, *, /, or ^     * @return an integer that indicates the precedence of operator:     *         0 if ( or ), 1 if + or -, 2 if * or /, 3 if ^, -1 if     *         anything else     */    private int getPrecedence(char operator)    {        switch (operator)        {            case '(':            case ')':                return 0;            case '+':            case '-':                return 1;            case '*':            case '/':                return 2;            case '^':                return 3;        } // end switch        return -1;    } // end getPrecedence    /**     * Evaluates a postfix expression.     * Segment 5.18     *     * @param postfix a string that is a valid postfix expression     * @return the value of the postfix expression     */    public double evaluatePostfix(String postfix)    {        // TODO-DONE PROJECT #5        Stack<Double> valueStack = new Stack<>();        int characterCount = postfix.length();        int index = 0;        while(index < characterCount){//postifx has characters left to parse   *************8            char nextCharacter = postfix.charAt(index);  //next nonblank character of postfix   *************8            switch(nextCharacter){                case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h':                    valueStack.push(valueOf(nextCharacter));                    break;                case '+' : case '-' : case '*' : case '/' : case '^' :                    double operandTwo = valueStack.pop();                    double operandOne = valueStack.pop();                    double result = compute(operandOne, operandTwo, nextCharacter);                    valueStack.push(result);                    break;                default: break;            }            index++;        }        return valueStack.peek();        // IMPLEMENT ALGORITHM 5.18//        return 0; // THIS IS A STUB    } // end evaluatePostfix    private double valueOf(char variable)    {        switch (variable)        {            case 'a':                return 2.0;            case 'b':                return 3.0;            case 'c':                return 4.0;            case 'd':                return 5.0;            case 'e':                return 6.0;        } // end switch        return 0;    } // end valueOf    private double compute(double operandOne, double operandTwo, char operator)    {        double result = 0;        switch (operator)        {            case '+':                result = operandOne + operandTwo;                break;            case '-':                result = operandOne - operandTwo;                break;            case '*':                result = operandOne * operandTwo;                break;            case '/':                if (operandTwo != 0)                    result = operandOne / operandTwo;                break;            case '^':                result = Math.pow(operandOne, operandTwo);                break;        } // end switch        return result;    } // end compute    public static void main(String[] args)    {        Postfix tester = new Postfix();        System.out.println("Converting infix expressions to postfix expressions:\n");        tester.convertToPostfix("a+b");        tester.convertToPostfix("(a + b) * c");        tester.convertToPostfix("a * b / (c - d)");        tester.convertToPostfix("a / b + (c - d)");        tester.convertToPostfix("a / b + c - d");        tester.convertToPostfix("a^b^c");        tester.convertToPostfix("(a^b)^c");        tester.convertToPostfix("a*(b/c+d)");        tester.convertToPostfix("(a+b)/(c-d)");        tester.convertToPostfix("a/(b-c)*d");        tester.convertToPostfix("a-(b/(c-d)*e+f)^g");        tester.convertToPostfix("(a-b*c)/(d*e^f*g+h)");        System.out.println("Evaluating postfix expressions with\n" +                "a = 2, b = 3, c = 4, d = 5, e = 6");        System.out.println("Assuming correct input!!!\n\n");        System.out.println("ae+bd-/ : " + tester.evaluatePostfix("ae+bd-/") + "\n");        System.out.println("abc*d*- : " + tester.evaluatePostfix("abc*d*-") + "\n");        System.out.println("abc-/d* : " + tester.evaluatePostfix("abc-/d*") + "\n");        System.out.println("ebca^*+d- : " + tester.evaluatePostfix("ebca^*+d-") + "\n");        System.out.println("Done.");    }  // end main} // end Postfix