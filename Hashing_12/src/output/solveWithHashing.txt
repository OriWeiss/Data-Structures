Author: Ori Weiss
Date 4/26/2018

"C:\Program Files\Java\jdk1.8.0_161\bin\java" "-javaagent:C:\Program Files (x86)\IntelliJ IDEA 2017.3.3\lib\idea_rt.jar=61095:C:\Program Files (x86)\IntelliJ IDEA 2017.3.3\bin" -Dfile.encoding=UTF-8 -classpath "C:\Program Files\Java\jdk1.8.0_161\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_161\jre\lib\rt.jar;C:\Users\Ori's Lenovo\Desktop\School\comp_151\Lab12\out\production\Lab12" Lab12.SolveWithHashing

	*** Testing displayHashTable ***
displaying empty dictionary
The size of hash table is: 5
In displayHashTable - implement me
0    null
1    null
2    null
3    null
4    null

displaying dictionary after 2 entries have been added
The size of hash table is: 5
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 1
Index 2 Key 7 Value: 7
3    null
4    null

displaying dictionary after 3 additional entries have been added
The size of hash table is: 11
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 1
Index 2 Key 13 Value: 13
3    null
4    null
5    null
Index 6 Key 17 Value: 17
Index 7 Key 7 Value: 7
Index 8 Key 8 Value: 8
9    null
10   null

displaying dictionary after 2 entries have been removed
The size of hash table is: 11
In displayHashTable - implement me
0    null
1    notIN
Index 2 Key 13 Value: 13
3    null
4    null
5    null
6    notIN
Index 7 Key 7 Value: 7
Index 8 Key 8 Value: 8
9    null
10   null


	*** Find The First Element With Duplicate ***
The size of hash table is: 11
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 4
Index 2 Key 2 Value: -5
Index 3 Key 3 Value: -2
4    null
Index 5 Key 5 Value: -3
6    null
7    null
8    null
Index 9 Key 9 Value: 1
10   null

--> the first element that is repeated is: 5

The size of hash table is: 11
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 5
Index 2 Key 2 Value: -4
Index 3 Key 3 Value: -3
4    null
5    null
Index 6 Key 6 Value: -1
7    null
8    null
9    null
10   null

--> the first element that is repeated is: 2

The size of hash table is: 11
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 2
Index 2 Key 2 Value: -1
Index 3 Key 3 Value: -5
4    null
5    null
Index 6 Key 6 Value: -3
7    null
8    null
9    null
10   null

--> the first element that is repeated is: 2

The size of hash table is: 11
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 3
Index 2 Key 2 Value: -2
Index 3 Key 3 Value: -1
4    null
5    null
Index 6 Key 6 Value: -7
7    null
8    null
9    null
10   null

--> the first element that is repeated is: 2

The size of hash table is: 23
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 6
Index 2 Key 2 Value: -7
Index 3 Key 3 Value: -2
Index 4 Key 4 Value: -3
Index 5 Key 5 Value: 9
6    null
7    null
8    null
Index 9 Key 9 Value: 1
10   null
11   null
12   null
13   null
14   null
15   null
16   null
17   null
18   null
19   null
20   null
21   null
22   null

--> the first element that is repeated is: 4

The size of hash table is: 5
In displayHashTable - implement me
0    null
1    null
2    null
Index 3 Key 3 Value: -1
4    null

--> the first element that is repeated is: 3

The size of hash table is: 23
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 1
Index 2 Key 2 Value: 2
Index 3 Key 3 Value: 3
Index 4 Key 4 Value: 4
Index 5 Key 5 Value: 5
Index 6 Key 6 Value: 6
Index 7 Key 7 Value: 7
Index 8 Key 8 Value: 8
9    null
10   null
11   null
12   null
13   null
14   null
15   null
16   null
17   null
18   null
19   null
20   null
21   null
22   null

--> duplicates not found

The size of hash table is: 23
In displayHashTable - implement me
0    null
Index 1 Key 1 Value: 2
Index 2 Key 2 Value: 3
Index 3 Key 3 Value: 4
Index 4 Key 4 Value: 5
Index 5 Key 5 Value: 6
Index 6 Key 6 Value: 7
Index 7 Key 7 Value: 8
Index 8 Key 8 Value: 1
9    null
10   null
11   null
12   null
13   null
14   null
15   null
16   null
17   null
18   null
19   null
20   null
21   null
22   null

--> duplicates not found


	*** Check If There Exists A Pair Of Elements That Add Up To k ***
k = 2
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {1,1} adds up to 2
--> pair that add up to 2 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {1,1} adds up to 2
--> pair that add up to 2 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {1,1} adds up to 2
--> pair that add up to 2 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {1,1} adds up to 2
--> pair that add up to 2 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
--> pair that add up to 2 NOT found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
--> pair that add up to 2 NOT found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,1} adds up to 2
--> pair that add up to 2 found.

k = 3
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {1,2} adds up to 3
--> pair that add up to 3 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {2,1} adds up to 3
--> pair that add up to 3 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {2,1} adds up to 3
--> pair that add up to 3 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {2,1} adds up to 3
--> pair that add up to 3 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
--> pair that add up to 3 NOT found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
--> pair that add up to 3 NOT found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,2} adds up to 3
--> pair that add up to 3 found.

k = 4
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {3,1} adds up to 4
--> pair that add up to 4 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {3,1} adds up to 4
--> pair that add up to 4 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {2,2} adds up to 4
--> pair that add up to 4 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,1} adds up to 4
--> pair that add up to 4 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,1} adds up to 4
--> pair that add up to 4 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
The pair {3,1} adds up to 4
--> pair that add up to 4 found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,3} adds up to 4
--> pair that add up to 4 found.

k = 5
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {3,2} adds up to 5
--> pair that add up to 5 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {3,2} adds up to 5
--> pair that add up to 5 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {2,3} adds up to 5
--> pair that add up to 5 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,2} adds up to 5
--> pair that add up to 5 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,2} adds up to 5
--> pair that add up to 5 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
The pair {3,2} adds up to 5
--> pair that add up to 5 found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,4} adds up to 5
--> pair that add up to 5 found.

k = 6
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {3,3} adds up to 6
--> pair that add up to 6 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {3,3} adds up to 6
--> pair that add up to 6 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {3,3} adds up to 6
--> pair that add up to 6 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,3} adds up to 6
--> pair that add up to 6 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,3} adds up to 6
--> pair that add up to 6 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
The pair {3,3} adds up to 6
--> pair that add up to 6 found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,5} adds up to 6
--> pair that add up to 6 found.

k = 7
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {5,2} adds up to 7
--> pair that add up to 7 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {6,1} adds up to 7
--> pair that add up to 7 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {1,6} adds up to 7
--> pair that add up to 7 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,4} adds up to 7
--> pair that add up to 7 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,4} adds up to 7
--> pair that add up to 7 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
The pair {3,4} adds up to 7
--> pair that add up to 7 found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,6} adds up to 7
--> pair that add up to 7 found.

k = 8
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {5,3} adds up to 8
--> pair that add up to 8 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {6,2} adds up to 8
--> pair that add up to 8 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {2,6} adds up to 8
--> pair that add up to 8 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,5} adds up to 8
--> pair that add up to 8 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {3,5} adds up to 8
--> pair that add up to 8 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
The pair {3,5} adds up to 8
--> pair that add up to 8 found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,7} adds up to 8
--> pair that add up to 8 found.

k = 9
toPutInHashTable = [9, 3, 5, 1, 2, 2, 5, 3, ]
toCheck = [6, 6, 3, 2, 1, 2, 2, 3, ]
The pair {3,6} adds up to 9
--> pair that add up to 9 found.
toPutInHashTable = [6, 6, 3, 2, 1, 2, 2, 3, ]
toCheck = [2, 1, 6, 2, 3, 2, 3, 6, ]
The pair {6,3} adds up to 9
--> pair that add up to 9 found.
toPutInHashTable = [2, 1, 6, 2, 3, 2, 3, 6, ]
toCheck = [3, 2, 1, 2, 2, 3, 6, 6, ]
The pair {6,3} adds up to 9
--> pair that add up to 9 found.
toPutInHashTable = [3, 2, 1, 2, 2, 3, 6, 6, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
The pair {6,3} adds up to 9
--> pair that add up to 9 found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [9, 3, 4, 4, 4, 1, 2, 2, 5, 3, ]
--> pair that add up to 9 NOT found.
toPutInHashTable = [3, 3, 3, 3, 3, 3, 3, ]
toCheck = [1, 2, 3, 4, 5, 6, 7, 8, ]
The pair {3,6} adds up to 9
--> pair that add up to 9 found.
toPutInHashTable = [1, 2, 3, 4, 5, 6, 7, 8, ]
toCheck = [8, 1, 2, 3, 4, 5, 6, 7, ]
The pair {1,8} adds up to 9
--> pair that add up to 9 found.


Bye!

Process finished with exit code 0
